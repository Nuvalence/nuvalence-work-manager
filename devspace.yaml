version: v1beta11

# `images` specifies all images that may need to be built for this project
images:
  workmanager:
    image: workmanager
    dockerfile: workmanager.Dockerfile
    context: .

# `deployments` tells DevSpace how to deploy this project
deployments:
- name: workmanagerpostgres
  # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
  helm:
    # We are deploying the so-called Component Chart: https://devspace.sh/component-chart/docs
    componentChart: true
    # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
    # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
    values:
      containers:
      - env:
        - name: PGDATABASE
          value: workmanagerpostgres
        - name: PGPORT
          value: "5432"
        - name: POSTGRES_DB
          value: workmanagerpostgres
        - name: POSTGRES_PASSWORD
          value: root
        - name: POSTGRES_USER
          value: root
        image: postgres:14-alpine
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready
          failureThreshold: 5
          periodSeconds: 10
        name: workmanagerpostgres
        volumeMounts:
        - containerPath: /var/lib/postgresql/data
          volume:
            name: db-data
            readOnly: false
      service:
        ports:
        - containerPort: 5432
          port: 5432
          protocol: TCP
      volumes:
      - name: db-data
        size: 5Gi
- name: workmanager
  # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
  helm:
    # We are deploying the so-called Component Chart: https://devspace.sh/component-chart/docs
    componentChart: true
    # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
    # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
    values:
      containers:
      - image: workmanager
        name: workmanager
      service:
        ports:
        - containerPort: 8080
          port: 8080
          protocol: TCP
- name: pgadmin
  # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
  helm:
    # We are deploying the so-called Component Chart: https://devspace.sh/component-chart/docs
    componentChart: true
    # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
    # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
    values:
      containers:
      - env:
        - name: PGADMIN_DEFAULT_EMAIL
          value: admin@admin.com
        - name: PGADMIN_DEFAULT_PASSWORD
          value: root
        image: dpage/pgadmin4
        name: workmanager-pgadmin
        volumeMounts:
        - containerPath: /var/lib/pgadmin
          volume:
            name: pgadmin-data
            readOnly: false
      restartPolicy: OnFailure
      service:
        ports:
        - containerPort: 80
          port: 5050
          protocol: TCP
      volumes:
      - name: pgadmin-data
        size: 5Gi

# `dev` only applies when you run `devspace dev`
dev:
  # `dev.ports` specifies all ports that should be forwarded while `devspace dev` is running
  # Port-forwarding lets you access your application via localhost on your local machine
  ports:
  - labelSelector:
      app.kubernetes.io/component: workmanagerpostgres
    forward:
    - port: 5432
  - labelSelector:
      app.kubernetes.io/component: workmanager
    forward:
    - port: 8080
  - labelSelector:
      app.kubernetes.io/component: pgadmin
    forward:
    - port: 5050
      remotePort: 80
hooks:
- events:
  - after:deploy:workmanagerpostgres
  wait:
    running: true
    terminatedWithCode: 0
  container:
    labelSelector:
      app.kubernetes.io/component: workmanagerpostgres
    containerName: workmanagerpostgres
